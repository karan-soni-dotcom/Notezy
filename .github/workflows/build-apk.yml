name: Build Android APK
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create minimal package.json if needed
        run: |
          if [ ! -f "package.json" ]; then
            echo '{"name": "pong-app", "version": "1.0.0", "description": "Pong Game App"}' > package.json
          fi

      - name: Install Capacitor dependencies
        run: |
          npm install @capacitor/core @capacitor/cli @capacitor/android

      - name: Prepare www folder
        run: |
          echo "Cleaning and preparing www/..."
          rm -rf www
          mkdir www

          # Find all top-level html/js/css
          mapfile -t web_files < <(
            find . -maxdepth 1 -type f \( -name '*.html' -o -name '*.js' -o -name '*.css' \)
          )

          if [ ${#web_files[@]} -gt 0 ]; then
            echo "Copying web assets to www/:"
            printf "  - %s\n" "${web_files[@]}"
            cp -- "${web_files[@]}" www/
          else
            echo "‚ö†Ô∏è  No .html/.js/.css found at repo root ‚Üí creating basic index.html"
            cat > www/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Pong App</title>
          </head>
          <body>
            <h1>Pong Game</h1>
            <p>Your game will load here...</p>
          </body>
          </html>
          EOF
          fi

          # Copy assets folder if it exists
          if [ -d assets ]; then
            echo "Copying assets/ ‚Üí www/assets/"
            cp -r assets www/
          else
            echo "‚ÑπÔ∏è  No assets/ directory found, skipping."
          fi

      - name: Initialize Capacitor project
        run: |
          npx cap init "PongApp" "com.example.pong" --web-dir=www

      - name: Debug Capacitor setup
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Capacitor config:"
          cat capacitor.config.json || echo "No capacitor.config.json found"
          echo "WWW directory contents:"
          ls -la www/
          echo "Capacitor CLI version:"
          npx cap --version

      - name: Add Android platform
        run: |
          echo "Adding Android platform..."
          npx cap add android
          echo "‚úÖ Android platform added successfully"

      - name: Verify Android platform
        run: |
          if [ -d "android" ]; then
            echo "‚úÖ Android directory exists"
            ls -la android/
          else
            echo "‚ùå Android directory not found"
            exit 1
          fi

      - name: Sync Capacitor to Android
        run: npx cap sync android

      - name: Generate Android app icons (with fallback)
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

          ICON_SRC=$(find . -maxdepth 2 -type f -name 'app.png' | head -n1 || true)

          if [ -f "$ICON_SRC" ]; then
            echo "Using icon: $ICON_SRC"
          else
            echo "‚ö†Ô∏è app.png not found; creating default placeholder icon."
            mkdir -p temp_icons
            # Create a simple colored square as placeholder
            convert -size 512x512 xc:blue temp_icons/icon.png
            ICON_SRC="temp_icons/icon.png"
          fi

          if [ ! -f "$ICON_SRC" ]; then
            echo "‚ùå No icon available to resize‚Äîskipping icon generation."
          else
            for size in 48 72 96 144 192 512; do
              case $size in
                48)  dir=mipmap-mdpi ;;
                72)  dir=mipmap-hdpi ;;
                96)  dir=mipmap-xhdpi ;;
                144) dir=mipmap-xxhdpi ;;
                192) dir=mipmap-xxxhdpi ;;
                512) dir=mipmap-anydpi-v26 ;;
              esac
              mkdir -p android/app/src/main/res/$dir
              convert "$ICON_SRC" -resize ${size}x${size} \
                android/app/src/main/res/$dir/ic_launcher.png \
                || echo "‚ö†Ô∏è Failed to generate ${size}√ó${size} icon; skipping."
            done
          fi

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Install Android SDK Tools
        uses: android-actions/setup-android@v3
        with:
          api-levels: 33
          build-tools: '33.0.2'

      - name: Grant execution permissions
        run: chmod +x android/gradlew

      - name: Build Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease

      - name: List generated APK files
        run: |
          echo "Generated APK files:"
          find android/app/build/outputs -name "*.apk" -type f

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pong-app-release.apk
          path: android/app/build/outputs/**/*.apk

      - name: Build Summary
        run: |
          echo "üéâ Build completed successfully!"
          echo "üì± APK files have been uploaded as artifacts"
          echo "üíæ Download the APK from the Actions tab to install on your device"
