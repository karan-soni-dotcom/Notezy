name: Build Android APK
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create minimal package.json if needed
        run: |
          if [ ! -f "package.json" ]; then
            echo '{"name": "pong-app", "version": "1.0.0", "description": "Pong Game App"}' > package.json
          fi

      - name: Install STABLE Capacitor dependencies
        run: |
          npm install @capacitor/core@5.7.8 @capacitor/cli@5.7.8 @capacitor/android@5.7.8

      - name: Prepare www folder
        run: |
          echo "Cleaning and preparing www/..."
          rm -rf www
          mkdir www

          # Find all top-level html/js/css
          mapfile -t web_files < <(
            find . -maxdepth 1 -type f \( -name '*.html' -o -name '*.js' -o -name '*.css' \)
          )

          if [ ${#web_files[@]} -gt 0 ]; then
            echo "Copying web assets to www/:"
            printf "  - %s\n" "${web_files[@]}"
            cp -- "${web_files[@]}" www/
          else
            echo "‚ö†Ô∏è  No .html/.js/.css found at repo root ‚Üí creating basic index.html"
            cat > www/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Pong App</title>
          </head>
          <body>
            <h1>Pong Game</h1>
            <p>Your game will load here...</p>
          </body>
          </html>
          EOF
          fi

          # Copy assets folder if it exists
          if [ -d assets ]; then
            echo "Copying assets/ ‚Üí www/assets/"
            cp -r assets www/
          else
            echo "‚ÑπÔ∏è  No assets/ directory found, skipping."
          fi

      - name: Initialize Capacitor project
        run: |
          npx cap init "PongApp" "com.example.pong" --web-dir=www

      - name: Add Android platform
        run: |
          echo "Adding Android platform..."
          npx cap add android
          echo "‚úÖ Android platform added successfully"

      - name: Sync Capacitor to Android
        run: npx cap sync android

      - name: Setup Java 17 (Stable)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK (Reliable method)
        run: |
          # Download and setup Android SDK manually for better control
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p android-sdk/cmdline-tools
          mv cmdline-tools android-sdk/cmdline-tools/latest
          
          export ANDROID_HOME=$PWD/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Accept licenses and install required components
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"
          
          # Set environment variables for the job
          echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
          echo "$PWD/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$PWD/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Skip custom icons (use defaults)
        run: |
          echo "‚ÑπÔ∏è Using default Capacitor icons to avoid any conflicts"
          echo "‚úÖ This eliminates all icon-related build errors"

      - name: Force stable Android versions
        run: |
          echo "üîß Ensuring stable Android SDK versions..."
          
          # Force compileSdkVersion and targetSdkVersion to 33 in build.gradle
          sed -i 's/compileSdkVersion [0-9]*/compileSdkVersion 33/' android/app/build.gradle
          sed -i 's/targetSdkVersion [0-9]*/targetSdkVersion 33/' android/app/build.gradle
          sed -i 's/compileSdk [0-9]*/compileSdk 33/' android/app/build.gradle
          sed -i 's/targetSdk [0-9]*/targetSdk 33/' android/app/build.gradle
          
          # Update variables.gradle if it exists
          if [ -f "android/variables.gradle" ]; then
            sed -i 's/compileSdkVersion = [0-9]*/compileSdkVersion = 33/' android/variables.gradle
            sed -i 's/targetSdkVersion = [0-9]*/targetSdkVersion = 33/' android/variables.gradle
          fi
          
          # Show what we set
          echo "üìã Current Android versions in build.gradle:"
          grep -E "(compileSdk|targetSdk)" android/app/build.gradle || true

      - name: Grant execution permissions
        run: chmod +x android/gradlew

      - name: Build Release APK
        run: |
          cd android
          export ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk
          ./gradlew clean assembleRelease --stacktrace

      - name: List generated APK files
        run: |
          echo "Generated APK files:"
          find android/app/build/outputs -name "*.apk" -type f

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pong-app-release.apk
          path: android/app/build/outputs/**/*.apk

      - name: Build Summary
        run: |
          echo "üéâ Build completed successfully!"
          echo "üì± APK files have been uploaded as artifacts"
          echo "üíæ Download the APK from the Actions tab to install on your device"
